name: Test

on: [push, pull_request]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest]
        #python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        python-version: ["3.13"]
        #pydantic: ["==1.10.2", ">=2.0.0"]
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        uv sync --dev --python ${{ matrix.python-version }} --python-preference only-system
        # uv pip install 'pydantic${{ matrix.pydantic }}'
    - name: Run tests
      run: |
        uv -v run python -X dev -X faulthandler -m pytest
    - name: Check if cog needs to be run
      if: matrix.os != 'windows-latest'
      run: |
        uv run cog --check \
          -p "import sys, os; sys._called_from_test=True; os.environ['LLM_USER_PATH'] = '/tmp'" \
          docs/**/*.md docs/*.md
    - name: Run Black
      if: matrix.os != 'windows-latest'
      run: |
        uv run ruff format --check .
    - name: Run mypy
      if: matrix.os != 'windows-latest'
      run: |
        uv run mypy llm
    - name: Run ruff
      if: matrix.os != 'windows-latest'
      run: |
        uv run ruff check .
    - name: Run test-llm-load-plugins.sh
      if: matrix.os != 'windows-latest'
      run: |
        uv pip install llm-cluster llm-mistral
        uv run ./tests/test-llm-load-plugins.sh
